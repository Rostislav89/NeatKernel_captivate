#!/busybox sh
#
# PURPOSE 
# ONE KERNEL IMAGE WITH ONE INITRAMFS FLASHABLE WITH HEIMDALL/ODIN 
#
# AUTHORS
# Stratosk: http://forum.xda-developers.com/showthread.php?t=1468795
# Mialwe: http://forum.xda-developers.com/showthread.php?t=1551410
#
# BACKGROUND
# CM9 currently uses an init system with two separate initramfs
# images which are packed into the kernel image at compile time.
# During every boot process the needed initramfs image (recovery
# or Android) gets extracted and the boot process continues using 
# the freshly extracted initramfs. A CWM zip has to be used to 
# install the kernel and it's modules/support files.
#
# With this initscript there will be one initramfs only, without
# the need to pack/extract anything and a reduced risk for 
# boot issues resulting from this processes. Additionally the
# generated kernel image can be flashed directly via Heimdall/Odin.
# 
# ORIGINAL SOURCE 
# CM9: https://github.com/CyanogenMod/android_kernel_samsung_aries
# DorimanX Ideas: https://github.com/dorimanx/initramfs3
#
# INITRAMFS STRUCTURE:
# /
#  -- /recovery	        (cwm and twrp)
#  -- /res/cm_10_0		(complete Android 4.1 initramfs)
#  -- /res/cm_10_1		(complete Android 4.2 initramfs)
#  -- /res/cm_10_2		(complete Android 4.3 initramfs)
#  -- /res/cm_11_0		(complete Android 4.4 initramfs)
#  -- /res/hw/cm**/lights.aries.so (CM/BLN)
#  -- init (this script)
#  -- busybox
#  -- erase_image (binary)
# 

export _PATH="$PATH"
export PATH=/

# set busybox location, save busybox as we will move directories
BB="/busybox"

# initialize working dir and log
$BB cd /
$BB date >>boot.txt
exec >>boot.txt 2>&1

$BB rm init

$BB echo "generating mount directories..."
$BB mkdir proc
$BB mkdir sys
$BB mkdir cache
$BB mkdir sdcard
$BB mkdir system
$BB mkdir data

$BB mkdir /dev
$BB mkdir /dev/block

$BB echo "generating device nodes..."
$BB mknod /dev/block/mmcblk0 b 179 0
$BB mknod /dev/block/mmcblk0p1 b 179 1
$BB mknod /dev/block/mmcblk0p2 b 179 2
$BB mknod /dev/block/mmcblk0p3 b 179 3
$BB mknod /dev/block/mtdblock2 b 31 2
$BB mknod /dev/block/mtdblock3 b 31 3
$BB mknod /dev/urandom c 1 9

$BB echo "mounting devices..."
$BB mount -t proc proc /proc
$BB mount -t sysfs sysfs /sys
$BB echo 1 > /sys/kernel/req_recovery/enable
$BB mv -f /res/charger /

while ! $BB test -d /sys/dev/block/179:0 ; do
    echo "Waiting for internal mmc..."
    $BB sleep 1
done

/lvm/sbin/lvm vgscan --mknodes --ignorelockingfailure
/lvm/sbin/lvm vgchange -aly --ignorelockingfailure

$BB mount -t ext4 /dev/lvpool/system /system -o rw,noatime,nodiratime,data=writeback,barrier=0,nobh,nodev,nosuid,nomblk_io_submit,errors=panic,discard
$BB mount -t yaffs2 /dev/block/mtdblock3 /cache
$BB mount -t ext4 /dev/lvpool/userdata /data -o rw,noatime,nodiratime,data=writeback,barrier=0,nobh,nodev,nosuid,nomblk_io_submit,errors=panic,discard
$BB mv /cache/boot.txt /cache/boot.bak

# check for vibrant
VIBRANT=`$BB cat /system/build.prop | $BB grep "ro.product.device=SGH-T959" | $BB wc -l`;
VIBRANT2=`$BB cat /system/build.prop | $BB grep "ro.build.product=SGH-T959" | $BB wc -l`;

# check for SDK build version
CM_10_0=`$BB cat /system/build.prop | $BB grep "ro.build.version.sdk=16" | $BB wc -l`;
CM_10_1=`$BB cat /system/build.prop | $BB grep "ro.build.version.sdk=17" | $BB wc -l`;
CM_10_2=`$BB cat /system/build.prop | $BB grep "ro.build.version.sdk=18" | $BB wc -l`;
CM_11_0=`$BB cat /system/build.prop | $BB grep "ro.build.version.sdk=19" | $BB wc -l`;

# check for /system/.neatkernel directory
if $BB [ ! -d /system/.neatkernel ]; then 
    $BB echo "making /data/neatkernel directory"
    $BB mkdir /system/.neatkernel
fi

# check if swapsd or not
SWAPSD_CHECK_FILE="/system/.neatkernel/swapsd"
SWAPSD_CHECK=`$BB cat $SWAPSD_CHECK_FILE | $BB grep "swapsd=1" | $BB wc -l`;
if [ "$SWAPSD_CHECK" -eq "0" ]; then
    $BB echo "generating SWAPSD_CHECK_FILE"
    $BB echo "swapsd=0" > $SWAPSD_CHECK_FILE
fi
$BB echo "SwapSD: $SWAPSD_CHECK"

USER_ACTIONS()
{
	if [ "$CM_10_0" -eq "1" ]; then
		$BB echo "Android or MIUI 4.1 Found";
		$BB cp -a /res/cm_10_0/* /;
                # check for vibrant gps
                if [ "$VIBRANT" -eq "1" ] || [ "$VIBRANT2" -eq "1" ]; then
                $BB rm /init.aries.gps.rc;
                $BB cp /res/init.aries.gps.rc.vibrant /init.aries.gps.rc;
		fi
                # check for SwapSD
                if [ "$SWAPSD_CHECK" -eq "1" ]; then
                  $BB rm /system/etc/vold.fstab;
                  $BB cp /res/vold.fstab.swapsd /system/etc/vold.fstab;
                else
                  $BB rm /system/etc/vold.fstab;
                  $BB cp /res/vold.fstab /system/etc/vold.fstab;
                fi
		if $BB [ -f /data/local/.bln ]; then
	    		$BB echo "updating BLN lights.aries.so...";
	    		$BB cp /res/hw/hw_cm_10_0/lights.aries.so.bln /system/lib/hw/lights.aries.so;
		else
			$BB echo "updating CM led lights.aries.so...";
			$BB cp /res/hw/hw_cm_10_0/lights.aries.so.cm /system/lib/hw/lights.aries.so;
		fi
		BOOT;

	elif [ "$CM_10_1" -eq "1" ]; then
		$BB echo "Android or MIUI 4.2 Found";
		$BB cp -a /res/cm_10_1/* /;
                # check for vibrant gps
                if [ "$VIBRANT" -eq "1" ] || [ "$VIBRANT2" -eq "1" ]; then
                $BB rm /init.aries.gps.rc;
                $BB cp /res/init.aries.gps.rc.vibrant /init.aries.gps.rc;
		fi
                # check for SwapSD
                if [ "$SWAPSD_CHECK" -eq "1" ]; then
                  $BB rm /system/etc/vold.fstab;
                  $BB cp /res/vold.fstab.swapsd /system/etc/vold.fstab;
                else
                  $BB rm /system/etc/vold.fstab;
                  $BB cp /res/vold.fstab /system/etc/vold.fstab;
                fi
		if $BB [ -f /data/local/.bln ]; then
	    		$BB echo "updating BLN lights.aries.so...";
	    		$BB cp /res/hw/hw_cm_10_1/lights.aries.so.bln /system/lib/hw/lights.aries.so;
		else
			$BB echo "updating CM led lights.aries.so...";
			$BB cp /res/hw/hw_cm_10_1/lights.aries.so.cm /system/lib/hw/lights.aries.so;
		fi
		BOOT;
	
	elif [ "$CM_10_2" -eq "1" ]; then
		$BB echo "Android or MIUI 4.3 Found";
		$BB cp -a /res/cm_10_2/* /;
                # check for vibrant gps
                if [ "$VIBRANT" -eq "1" ] || [ "$VIBRANT2" -eq "1" ]; then
                $BB rm /init.aries.gps.rc;
                $BB cp /res/init.aries.gps.rc.vibrant /init.aries.gps.rc;
		fi
                # check for SwapSD
                if [ "$SWAPSD_CHECK" -eq "1" ]; then
                  $BB rm /fstab.aries;
                  $BB cp /res/fstab.aries.swapsd.cm10.2 /fstab.aries;
                fi
		if $BB [ -f /data/local/.bln ]; then
	    		$BB echo "updating BLN lights.aries.so...";
	    		$BB cp /res/hw/hw_cm_10_2/lights.aries.so.bln /system/lib/hw/lights.aries.so;
		else
			$BB echo "updating CM led lights.aries.so...";
			$BB cp /res/hw/hw_cm_10_2/lights.aries.so.cm /system/lib/hw/lights.aries.so;
		fi
		$BB rm /system/bin/auditd;
		BOOT;

	elif [ "$CM_11_0" -eq "1" ]; then
		$BB echo "Android or MIUI 4.4 Found";
		$BB cp -a /res/cm_11_0/* /;
                # check for vibrant gps
                if [ "$VIBRANT" -eq "1" ] || [ "$VIBRANT2" -eq "1" ]; then
                $BB rm /init.aries.gps.rc;
                $BB cp /res/init.aries.gps.rc.vibrant /init.aries.gps.rc;
		fi
                # check for SwapSD
                if [ "$SWAPSD_CHECK" -eq "1" ]; then
                  $BB rm /fstab.aries;
                  $BB cp /res/fstab.aries.swapsd.cm11 /fstab.aries;
                fi
		if $BB [ -f /data/local/.bln ]; then
	    		$BB echo "updating BLN lights.aries.so...";
	    		$BB cp /res/hw/hw_cm_11_0/lights.aries.so.bln /system/lib/hw/lights.aries.so;
		else
			$BB echo "updating CM led lights.aries.so...";
			$BB cp /res/hw/hw_cm_11_0/lights.aries.so.cm /system/lib/hw/lights.aries.so;
		fi
		$BB rm /system/bin/auditd;
		BOOT;
	else
		$BB echo "Wrong Kernel or Empty System Partition";
		$BB cp -a /recovery/* /;
	fi;
}

BOOT()
{

$BB fstrim /system
$BB fstrim /data

$BB chmod 644 /system/lib/hw/lights.aries.so

if $BB [ ! -d /system/etc/init.d ]; then 
	$BB echo "making init.d";
	$BB mkdir /system/etc/init.d;
	$BB chmod 777 /system/etc/init.d;
fi

NEATVER=`$BB uname -r`
$BB echo "version: $NEATVER"
NEAT_CHECK_FILE="/system/.neatkernel/neatkernel"

if $BB [ ! -d /system/lib/modules ]; then 
    $BB echo "making modules directory"
    $BB mkdir /system/lib/modules
    $BB chmod 777 /system/lib/modules
fi

INSTALLED_NEATKERNEL_VER=$($BB cat $NEAT_CHECK_FILE)
$BB echo $INSTALLED_NEATKERNEL_VER

if $BB [ "`$BB grep $NEATVER /system/lib/modules/ansi_cprng.ko`" ] && $BB [ "$NEATVER" = "$INSTALLED_VER" ]; then
    $BB echo "kernel files already installed, nothing to do"
elif $BB [ "`$BB grep $NEATVER /res/lib/modules/ansi_cprng.ko`" ]; then
   
    $BB echo "removing old modules..."
    $BB rm /system/lib/modules/*

    $BB echo "updating modules..."
    $BB cp -a /res/lib/modules/* /system/lib/modules/

    if $BB [ "$NEATVER" != "$INSTALLED_NEATKERNEL_VER" ]; then
        $BB echo "generating NEAT_CHECK_FILE"
	$BB echo "$NEATVER" > $NEAT_CHECK_FILE
    fi
fi

if [ "$CM_11_0" -eq "1" ]; then
$BB echo "removing old Memlibs...";
$BB rm /system/lib/libOMX.SEC.AVC.Decoder.so;
$BB rm /system/lib/libOMX.SEC.AVC.Encoder.so;
$BB rm /system/lib/libOMX.SEC.M4V.Decoder.so;
$BB rm /system/lib/libOMX.SEC.M4V.Encoder.so;
$BB rm /system/lib/libSEC_OMX_Core.so;
$BB rm /system/lib/libstagefright_omx.so;
$BB echo "updating BigMemlibs...";
$BB cp -a /res/lib/bigmemlibs/* /system/lib/;
$BB chmod 644 /system/lib/libOMX.SEC.AVC.Decoder.so;
$BB chmod 644 /system/lib/libOMX.SEC.AVC.Encoder.so;
$BB chmod 644 /system/lib/libOMX.SEC.M4V.Decoder.so;
$BB chmod 644 /system/lib/libOMX.SEC.M4V.Encoder.so;
$BB chmod 644 /system/lib/libSEC_OMX_Core.so;
$BB chmod 644 /system/lib/libstagefright_omx.so;
fi

}

$BB echo "command line:"
$BB cat /proc/cmdline

$BB echo "starting bootmode detection..."
if $BB grep -q bootmode=2 /proc/cmdline || $BB grep -q bootmode=9 /proc/cmdline ; then
    # recovery boot
    $BB echo "found recovery command, preparing boot...";
    $BB echo "moving recovery to /";
    $BB mv -f /recovery/* /;
    # check for SwapSD for recovery
    if [ "$SWAPSD_CHECK" -eq "1" ]; then
        $BB cp $SWAPSD_CHECK_FILE /;  
    fi
    $BB cp $BB /sbin/busyboxboot;
    $BB echo 0 > /sys/class/power_supply/battery/charging_mode_booting;
else
    USER_ACTIONS;
fi

if $BB grep -q 1 /sys/class/power_supply/battery/charging_mode_booting ; then
    # low power mode
    $BB echo "found charging_mode command";
    $BB cp /lpm.rc /init.rc;
    $BB rm /init.aries.rc;
fi

$BB echo "debug output:"
$BB echo "current /:"
$BB ls -l /
$BB echo "current /sbin:"
$BB ls -l /sbin/
$BB echo "current /system:"
$BB ls -l /system/
#$BB echo "current /cache:"
#$BB ls -l /cache/
$BB echo "current /system/lib/modules:"
$BB ls -l /system/lib/modules/
$BB echo "current /system/lib/hw:"
$BB ls -l /system/lib/hw/

$BB echo "PATH:"
$BB echo $PATH
$BB echo "_PATH:"
$BB echo %{_PATH}

$BB echo "cleaning up..."
$BB echo 0 > /sys/kernel/req_recovery/enable
$BB umount /sys
$BB umount /proc
$BB umount /data
$BB umount /system
$BB cp /boot.txt /cache/
$BB umount /cache
$BB rm -r /res/hw/
$BB rm -r /sdcard

# original initramfs directories not needed anymore,
$BB rm -rf /res/cm_10_0
$BB rm -rf /res/cm_10_1
$BB rm -rf /res/cm_10_2
$BB rm -rf /res/cm_11_0
$BB rm -rf /res/lib
$BB rm -rf /recovery
$BB rm /res/vold.fstab
$BB rm /res/vold.fstab.swapsd
$BB rm /res/fstab.aries.swapsd.cm10.2
$BB rm /res/fstab.aries.swapsd.cm11
$BB rm /res/init.aries.gps.rc.vibrant

$BB date >>boot.txt
$BB rm -fr /dev/*

# remove busybox
$BB rm /busybox

export PATH="${_PATH}"
exec /init
