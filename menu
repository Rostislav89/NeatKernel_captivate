#!/bin/bash

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Clear the console before starting
  clear

# Create a variable to store the version
  export version=0.5

# location
export KERNELDIR=`readlink -f .`;
export PARENT_DIR=`readlink -f ${KERNELDIR}/..`;

# Create bold and normal types of letter
  export undrln=$(tput smul)     # underline
  export t_bold=$(tput bold)     # make bold
  export t_normal=$(tput sgr0)   # text reset

  export blk="$(tput setaf 0)"   # Black - Regular
  export red="$(tput setaf 1)"   # Red
  export grn="$(tput setaf 2)"   # Green
  export ylw="$(tput setaf 3)"   # Yellow
  export blu="$(tput setaf 4)"   # Blue
  export pur="$(tput setaf 5)"   # Purple
  export cyn="$(tput setaf 6)"   # Cyan
  export wht="$(tput setaf 7)"   # White


# Introducing test
  echo "${t_normal}${t_bold}--------------------------------------------------------"
  echo "${grn}  _    _            __   _  __                      _   "
  echo "${grn} | \  | | ___ _____|  |_| |/ /___  _ __ _ ___  ___ | |  "
  echo "${grn} |  \ ' |/ _ \ ___ |  __| ' // _ \| '__| '_  \/ _ \| |  "
  echo "${grn} | | \  |  __/' __ |  | | . \  __/| |  | | | |  __/| |_ "
  echo "${grn} |_|  \_|\___ |____|\___|_|\_\____|_|  |_| |_|\___ |___|"
  echo "${t_normal}${t_bold}--------------------------------------------------------"
  echo "${red} Neatkernel auto-maker menu Version $version"
  echo "${t_normal}${t_bold}--------------------------------------------------------"
# question:
  echo "${grn}${t_bold} Which device you would like to build?"
# Answers:
  echo "${t_normal} 1. captivatemtd"
  echo " 2. vibrantmtd"
  echo " 3. galaxysmtd"
  echo " 4. galaxysbmtd"
  echo " 5. compile all"
  echo "${t_normal}${t_bold}--------------------------------------------------------"
  echo " ${grn}note: use this after kernel compiled"
  echo " ${wht}n. copy neatkernel.zip to parent directory"
  echo " ${ylw}t. copy neatkernel.zip to parent directory"
  echo "${t_normal}${t_bold}--------------------------------------------------------"
  echo " ${grn}c. clean script"
  echo " ${red}r. Restart"
  echo " ${blu}x. Exit"
  echo "${t_normal}${t_bold}--------------------------------------------------------"
  

# Read the letter the user gives
  echo
read enterLetter

# captivatemtd
  if [ "$enterLetter" == "1" ]
    then
    ./build_kernel.sh captivate

# vibrantmtd
  elif [ "$enterLetter" == "2" ]
    then
    ./build_kernel.sh vibrant

# galaxysmtd
  elif [ "$enterLetter" == "3" ]
    then
    ./build_kernel.sh galaxys

# galaxysbmtd
  elif [ "$enterLetter" == "4" ]
    then
    ./build_kernel.sh galaxysb

# compile all
  elif [ "$enterLetter" == "5" ]
    then
    touch $KERNELDIR/all
    ./clean_kernel.sh
    ./build_kernel.sh captivate
    if [ -d '/$PARENT_DIR/out' ]
    then
    cp $KERNELDIR/out/*.zip /$PARENT_DIR/out/
    cp $KERNELDIR/out/*.tar /$PARENT_DIR/out/
    else
    mkdir /$PARENT_DIR/out
    cp $KERNELDIR/out/*.zip /$PARENT_DIR/out/
    cp $KERNELDIR/out/*.tar /$PARENT_DIR/out/  
    fi
    ./clean_kernel.sh
    ./build_kernel.sh vibrant
    cp $KERNELDIR/out/*.zip /$PARENT_DIR/out/
    cp $KERNELDIR/out/*.tar /$PARENT_DIR/out/
    ./clean_kernel.sh
    ./build_kernel.sh galaxys
    cp $KERNELDIR/out/*.zip /$PARENT_DIR/out/
    cp $KERNELDIR/out/*.tar /$PARENT_DIR/out/
    ./clean_kernel.sh
    ./build_kernel.sh galaxysb
    cp $KERNELDIR/out/*.zip /$PARENT_DIR/out/
    cp $KERNELDIR/out/*.tar /$PARENT_DIR/out/
    ./clean_kernel.sh
    rm $KERNELDIR/all
    echo " compile all kernels done "
    ./menu

# copy neatkernel.zip to parent dirictory
  elif [ "$enterLetter" == "n" ]
    then
    if [ -e /$KERNELDIR/out/*.zip ]
    then
    if [ -d /$PARENT_DIR/out ]
    then
    cp $KERNELDIR/out/*.zip /$PARENT_DIR/out/
    echo " copy neatkernel.zip done "
    ./menu
    else
    mkdir /$PARENT_DIR/out
    cp $KERNELDIR/out/*.zip /$PARENT_DIR/out/
    echo " copy neatkernel.zip done " 
    ./menu
    fi
    else
    echo " no neatkernel.zip in ~/KERNELDIR/out "
    fi 
    ./menu
    
# copy neatkernel.tar to parent dirictory
  elif [ "$enterLetter" == "t" ]
    then
    if [ -e /$KERNELDIR/out/*.tar ]
    then
    if [ -d /$PARENT_DIR/out ]
    then
    cp $KERNELDIR/out/*.tar /$PARENT_DIR/out/
    echo " copy neatkernel.tar done "
    ./menu
    else
    mkdir /$PARENT_DIR/out
    cp $KERNELDIR/out/*.tar /$PARENT_DIR/out/
    echo " copy neatkernel.tar done " 
    ./menu
    fi
    else
    echo " no neatkernel.tar in ~/KERNELDIR/out "
    fi 
    ./menu

# clean script
  elif [ "$enterLetter" == "c" ]
    then
    ./clean_kernel.sh

# Restart
  elif [ "$enterLetter" == "r" ]
    then
    ./menu

# Exit
  elif [ "$enterLetter" == "x" ]
    then
exit 0

# Other choice
  else
echo "Invalid option"
    ./menu
fi


